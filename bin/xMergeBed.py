#!/usr/bin/env python
# Programmer : zhuxp
# Date: 
# Last-modified: 11-12-2013, 19:37:47 EST
VERSION="0.1"
import os,sys,argparse
from xplib.Annotation import Bed
from xplib import TableIO,Tools
from xplib.Tools import IO
import signal
signal.signal(signal.SIGPIPE,signal.SIG_DFL)
import gzip
import time
'''
simple bed extend format (no blocks)

usage:
xBedMerge.py -i a.bed b.bed c.bed

output:
#Bed File 1
#Bed File 2
#Bed File 3
chr start stop name score strand names(,) scores(,)

'''
def ParseArg():
    ''' This Function Parse the Argument '''
    p=argparse.ArgumentParser( description = 'Example: %(prog)s -h', epilog='Library dependency : xplib')
    p.add_argument('-v','--version',action='version',version='%(prog)s '+VERSION)
    p.add_argument('-i','--inputs',dest="inputs",nargs="+",help="bed files")
    p.add_argument('-o','--output',dest="output",type=str,default="stdout",help="output file DEFAULT: STDOUT")
    
    if len(sys.argv)==1:
        print >>sys.stderr,p.print_help()
        exit(0)
    return p.parse_args()
def Main():
    '''
    IO TEMPLATE
    '''
    global args,out
    args=ParseArg()
    out=IO.fopen(args.output,"w")
    '''
    END OF IO TEMPLATE 
    '''
    print >>out,"# This data was generated by program ",sys.argv[0]," (version: %s)"%VERSION,
    print >>out,"in bam2x ( https://github.com/nimezhu/bam2x )"
    print >>out,"# Date: ",time.asctime()
    print >>out,"# The command line is :"
    print >>out,"#\t"," ".join(sys.argv)

    hBed={};
    size=len(args.inputs);

    for i,f in enumerate(args.inputs):
        fh=IO.fopen(f)
        for b in TableIO.parse(fh,"bed"):
            key=bedToID(b)
            if hBed.has_key(key):
                hBed[key]=hBed[key]+str(i)+":"+str(b.score)+","
            else:
                hBed[key]=str(i)+":"+str(b.score)+","
    for key in hBed.keys():
        score,scores=translate(hBed[key],size)
        a=key.split("\t")

        #print >>out,key,"\t",translate(hBed[key],size)
        print >>out,a[0]+"\t"+a[1]+"\t"+a[2]+"\t"+",".join(a)+"\t"+str(score)+"\t"+a[3]+"\t"+scores



def translate(h,l):
    s=""
    score=0
    hlist=h.split(",")
    hmap={}
    for i in hlist[:-1]:
        a=i.split(":")
        hmap[a[0]]=a[1];
    for i in range(l):
        if hmap.has_key(str(i)):
            s+=str(hmap[str(i)])+","
            score+=1
        else:
            s+="none,"
    return (score,s[:-1])

    
            




def bedToID(bed):
    s=bed.chr+"\t"+str(bed.start)+"\t"+str(bed.stop)+"\t"+bed.strand
    return s;


    
if __name__=="__main__":
    Main()



