#!/usr/bin/env python
# Programmer : zhuxp
# Date: 
# Last-modified: 09-04-2013, 13:21:14 EDT
VERSION="0.1"
import os,sys,argparse
from xplib.Annotation import Bed
from xplib import TableIO
from xplib.Tools import *
from xplib import DBI,Tools
import signal
signal.signal(signal.SIGPIPE,signal.SIG_DFL)
import gzip
import time
'''
Input of this program is a set of isoforms  and bam file.
this program compare isoforms of a transcript with the reads overlap with the transcript region.
First it will detect the isoform which have the most compatible reads and report it, 
Then remove this compativble reads from reads set,
Compare the rest of isoforms with the new reads set,
Find the isoform which have the most compatible reads in the new reads set and report it,
and iterate the process until  99% ( or 95%) reads were compatible with with one of the isoform reported before.
'''
def ParseArg():
    ''' This Function Parse the Argument '''
    p=argparse.ArgumentParser( description = 'Example: %(prog)s -h', epilog='Library dependency : xplib')
    p.add_argument('-v','--version',action='version',version='%(prog)s '+VERSION)
    p.add_argument('-i','--input',dest="input",default="stdin",type=str,help="input file DEFAULT: STDIN")
    p.add_argument('-b','--bam',dest="bam",type=str,help="bamfile which containes RNA-Seq reads, or bamlist file")
    p.add_argument('-f','--format',dest="format",choices=['bam','bamlist'],type=str,default='bam',help="bam format or bamlist format")
    p.add_argument('-o','--output',dest="output",type=str,default="stdout",help="output file DEFAULT: STDOUT")
    p.add_argument('-s','--hit_only',dest="hit_only",default=False,action="store_true",help="only report hits")
    
    if len(sys.argv)==1:
        print >>sys.stderr,p.print_help()
        exit(0)
    return p.parse_args()
def find_max_compatible():
    global reads_set,isoforms_set,selected_reads_set,selected_isoforms_set
    if len(isoforms_set)==0: return True #break
    s=[0 for i in range(len(isoforms_set))]
    
    for i,x in enumerate(isoforms_set):
        for j,y in enumerate(reads_set):
            if compatible_with_transcript(y,x):
                s[i]+=1
    max=0
    maxi=0
    for i in range(len(isoforms_set)):
        if s[maxi] < s[i] : maxi=i

    #if s[maxi]==0: return True   # break

    new_reads_set=[]
    for j,y in enumerate(reads_set):
        if compatible_with_transcript(y,isoforms_set[maxi]):
            selected_reads_set.append(y)
        else:
            new_reads_set.append(y)
    reads_set=new_reads_set
    
    if s[maxi] > 0:
        print >>out,"HT\t",isoforms_set[maxi],"\t",s[maxi]
    else:
        print >>out,"NT\t",isoforms_set[maxi],"\t",s[maxi]
    if s[maxi]>0:
        selected_isoforms_set.append(isoforms_set[maxi])
    del isoforms_set[maxi]
    return False

def Main():
    '''
    IO TEMPLATE
    '''
    global args,out,isoforms_set,selected_isoforms_set,reads_set,selected_reads_set,dbi
    args=ParseArg()
    if args.output=="stdout":
        out=sys.stdout
    else:
        try:
            out=open(args.output,"w")
        except IOError:
            print >>sys.stderr,"can't open file ",args.output,"to write. Using stdout instead"
            out=sys.stdout
    if args.input=="stdin":
        fin=sys.stdin
    else:
        try:
            x=args.input.split(".")
            if x[-1]=="gz":
                fin=gzip.open(args.input,"r")
            else:
                fin=open(args.input,"r")
        except IOError:
            print >>sys.stderr,"can't read file",args.input
            fin=sys.stdin
    '''
    END OF IO TEMPLATE 
    '''
    print >>out,"# This data was generated by program ",sys.argv[0]," (version: %s)"%VERSION,
    print >>out,"in bam2x ( https://github.com/nimezhu/bam2x )"
    print >>out,"# Date: ",time.asctime()
    print >>out,"# The command line is :"
    print >>out,"#\t"," ".join(sys.argv)

    dbi=DBI.init(args.bam,args.format)
    '''
    reading all the isoforms
    '''
    isoforms=[]
    


    iterator=TableIO.parse(fin,"bed")
    beds=[]
    for i in iterator:
        beds.append(i)
    beds.sort()
    if len(beds)==0:
        print >>sys.stderr,"error in reading file",args.input
        exit(1)

    bed=beds[0]
    chr=bed.chr
    min_start=bed.start
    max_stop=bed.stop
    j=0
    for i in beds:
        j+=1
        if (j%10==0): print >>sys.stderr,"processed %d entries\r"%j,
        if Tools.overlap(bed,i):
            if bed.stop < i.stop:
                bed.stop=i.stop
            isoforms.append(i)
        else:
            compare(isoforms)
            isoforms=[i]
            bed=i
    if len(isoforms)>0:
        compare(isoforms)



def compare(isoforms):
    global reads_set,isoforms_set,selected_reads_set,selected_isoforms_set
    isoforms_set=[]
    selected_isoforms_set=[]
    chr=isoforms[0].chr
    min_start=isoforms[0].start
    max_stop=isoforms[0].stop
    for i in isoforms:
        if i.start < min_start: min_start=i.start
        if i.stop > max_stop: max_stop=i.stop
        isoforms_set.append(i)
#        print >>sys.stderr,"debug",i
    transcript_region=Bed([chr,min_start,max_stop]);
    print >>out,"REGION\t",chr,"\t",min_start,"\t",max_stop
    print >>out,"ISOFORM_INPUT_NUMBER\t",len(isoforms_set)

    
    '''
    reading all the reads in this transcript region
    '''
    reads_set=[]
    selected_reads_set=[]
    reads_num=0
    for i in dbi.query(transcript_region,method="fetch12"):
        reads_set.append(i)
        reads_num+=1
#        print >>sys.stderr,"debug",i


    '''
    compare two sets
    '''
    if reads_num==0:
        print >>out,"SUMMARY\t0 / 0 (0.0%) reads were generated from", len(selected_isoforms_set), "isoforms"
    else:
        while( float(len(selected_reads_set))/reads_num < 0.99):
            no_more_isoform=find_max_compatible()
            if no_more_isoform: break
        print >>out,"SUMMARY\t",len(selected_reads_set) ,"/", reads_num ,
        ratio=float(len(selected_reads_set))/reads_num,
        print >>out,"(%.4f)"%ratio,
        print >>out," reads were generated from ",len(selected_isoforms_set)," isoforms"
    print >>out,"//"
if __name__=="__main__":
    Main()





