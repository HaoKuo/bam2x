#!/usr/bin/env python
# Programmer : zhuxp
# Date: 
# Last-modified: 08-30-2013, 13:42:17 EDT
VERSION="0.1"
import os,sys,argparse
from xplib.Annotation import Bed
from xplib import TableIO
from xplib.Tools import *
from xplib import DBI
import signal
signal.signal(signal.SIGPIPE,signal.SIG_DFL)
import gzip
import time
'''
Input of this program is a set of isoforms  and bam file.
this program compare isoforms of a transcript with the reads overlap with the transcript region.
First it will detect the isoform which have the most compatible reads and report it, 
Then remove this compativble reads from reads set,
Compare the rest of isoforms with the new reads set,
Find the isoform which have the most compatible reads in the new reads set and report it,
and iterate the process until  99% ( or 95%) reads were compatible with with one of the isoform reported before.


'''
def ParseArg():
    ''' This Function Parse the Argument '''
    p=argparse.ArgumentParser( description = 'Example: %(prog)s -h', epilog='Library dependency : xplib')
    p.add_argument('-v','--version',action='version',version='%(prog)s '+VERSION)
    p.add_argument('-i','--input',dest="input",default="stdin",type=str,help="input file DEFAULT: STDIN")
    p.add_argument('-b','--bam',dest="bam",type=str,help="bamfile which containes RNA-Seq reads")
    p.add_argument('-o','--output',dest="output",type=str,default="stdout",help="output file DEFAULT: STDOUT")
    
    if len(sys.argv)==1:
        print >>sys.stderr,p.print_help()
        exit(0)
    return p.parse_args()
def find_max_compatible():
    global reads_set,isoforms_set,selected_reads_set,selected_isoforms_set
    if len(isoforms_set)==0: return True #break
    s=[0 for i in range(len(isoforms_set))]
    
    for i,x in enumerate(isoforms_set):
        for j,y in enumerate(reads_set):
            if compatible_with_transcript(y,x):
                s[i]+=1
    max=0
    maxi=0
    for i in range(len(isoforms_set)):
        if s[maxi] < s[i] : maxi=i

    if s[maxi]==0: return True   # break

    new_reads_set=[]
    for j,y in enumerate(reads_set):
        if compatible_with_transcript(y,isoforms_set[maxi]):
            selected_reads_set.append(y)
        else:
            new_reads_set.append(y)
    reads_set=new_reads_set
    

    print >>out,isoforms_set[maxi],"\t",s[maxi]
    selected_isoforms_set.append(isoforms_set[maxi])
    del isoforms_set[maxi]
    return False

def Main():
    '''
    IO TEMPLATE
    '''
    global args,out,isoforms_set,selected_isoforms_set,reads_set,selected_reads_set
    args=ParseArg()
    if args.output=="stdout":
        out=sys.stdout
    else:
        try:
            out=open(args.output,"w")
        except IOError:
            print >>sys.stderr,"can't open file ",args.output,"to write. Using stdout instead"
            out=sys.stdout
    if args.input=="stdin":
        fin=sys.stdin
    else:
        try:
            x=args.input.split(".")
            if x[-1]=="gz":
                fin=gzip.open(args.input,"r")
            else:
                fin=open(args.input,"r")
        except IOError:
            print >>sys.stderr,"can't read file",args.input
            fin=sys.stdin
    '''
    END OF IO TEMPLATE 
    '''
    print >>out,"# This data was generated by program ",sys.argv[0]," (version: %s)"%VERSION,
    print >>out,"in bam2x ( https://github.com/nimezhu/bam2x )"
    print >>out,"# Date: ",time.asctime()
    print >>out,"# The command line is :"
    print >>out,"#\t"," ".join(sys.argv)

    '''
    reading all the isoforms
    '''
    iterator=TableIO.parse(fin,"bed")
    bed=iterator.next()
    chr=bed.chr
    min_start=bed.start
    max_stop=bed.stop
    isoforms_set=[]
    selected_isoforms_set=[]
    isoforms_set.append(bed)
    for i in iterator:
        if i.start < min_start: min_start=i.start
        if i.stop > max_stop: max_stop=i.stop
        isoforms_set.append(i)
#        print >>sys.stderr,"debug",i
    transcript_region=Bed([chr,min_start,max_stop]);
    
    '''
    reading all the reads in this transcript region
    '''
    dbi=DBI.init(args.bam,"bam")
    reads_set=[]
    selected_reads_set=[]
    reads_num=0
    for i in dbi.query(transcript_region,method="fetch12"):
        reads_set.append(i)
        reads_num+=1
#        print >>sys.stderr,"debug",i

    '''
    compare two sets
    '''
    while( float(len(selected_reads_set))/reads_num < 0.99):
        zero=find_max_compatible()
        if zero: break
    print >>out,"# ",len(selected_reads_set) ,"/", reads_num ,
    ratio=float(len(selected_reads_set))/reads_num,
    print >>out,"(%.4f)"%ratio,
    print >>out," reads were generated from ",len(selected_isoforms_set)," isoforms"
if __name__=="__main__":
    Main()





