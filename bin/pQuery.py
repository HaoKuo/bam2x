#!/usr/bin/env python
# Programmer : zhuxp
# Date: 
# Last-modified: 01-07-2014, 11:42:36 EST
VERSION="0.2"
'''
pQuery.py is an example program for using xplib.DBI interface
it reports the overlap features or data from the query region.

the query file format can be:
bed,vcf,genebed etc.

the database or data file can be:
bam,tabix,vcf,bed,genebed etc.

for tabix ant other genome annotation file ,
    it yield the overlap annotations in this region
for bam file
    it yield the Nucleotides Distribution in each site of this region.
Example:
    pQuery.py -i file.bed -a file.bam
'''
import os,sys,argparse
from xplib.Annotation import Bed
from xplib import TableIO,Tools,DBI
from xplib.Tools import IO
import pysam
import signal
signal.signal(signal.SIGPIPE,signal.SIG_DFL)
import time
import numpy
import multiprocessing as mp
from multiprocessing import Process, Lock, Pool

def ParseArg():
    ''' This Function Parse the Argument '''
    p=argparse.ArgumentParser( description = 'Example: %(prog)s -i file.snp -a file.vcf.gz -A tabix -o output.file', epilog='Library dependency : pysam xplib')
    p.add_argument('-v','--version',action='version',version='%(prog)s '+VERSION)
    p.add_argument('-i','--input',dest="input",type=str,default="stdin",help="input file")
    p.add_argument('-I','--format',dest="input_format",type=str,choices=TableIO.FormatToIterator.keys(),help="input file format",default="guess")
    p.add_argument('-A','--dbformat',dest="dbformat",type=str,choices=DBI.FormatToDBI.keys(),help="input file database format. {bed|genebed|tabix|bam}",default="guess")
    p.add_argument('-o','--output',dest="output",type=str,default="stdout",help="output file")
    p.add_argument('-a','--annotations',dest="db",type=str,default="",required=True,help="query annotation files")
    p.add_argument('-m','--query_method',dest="query_method",type=str,help="query method : ( bamfile: pileup or fetch or fetch12 (splicing reads) ; bigwig: cDNA or not ; twobit: seq | cDNA | cds | utr3 | utr5 )")
    p.add_argument('-t','--tabix_format',dest="tabix_format",type=str,help="tabix format",default="simple")
    p.add_argument('-H','--tabix_header',dest="tabix_header",type=str,help="tabix header file [ override tabix format , using metabed ]")
    p.add_argument('-n','--processor',dest="processor",type=int,default=4,help="processor number: DEFAULT %(default)i")
    if len(sys.argv)==1:
        print >>sys.stderr,p.print_help()
        exit(0)
    return p.parse_args()


def Main():
    global args,out,reader,dict,query_num
    args=ParseArg()
    dict={}
    out=IO.fopen(args.output,"w")
    argv=sys.argv
    argv[0]=argv[0].split("/")[-1]
    print >>out,"# This data was generated by program ",argv[0],"(version %s)"%VERSION,
    print >>out,"in bam2x ( https://github.com/nimezhu/bam2x )"
    print >>out,"# Date: ",time.asctime()
    print >>out,"# The command line is :\n#\t"," ".join(argv)
    if args.input=="stdin":
        input=sys.stdin
    else:
        input=args.input
    if (args.input_format=="guess"):
        args.input_format=Tools.guess_format(args.input)
    reader=TableIO.parse(input,args.input_format)
    query_list=[]
    query_lists=[[] for i in range(args.processor)]
    query_num=0
    for i,x in enumerate(reader):
        query_lists[i%args.processor].append(x)
    query_num=i

    '''
    p=[]
    lock=Lock()

    for i in range(args.processor):
        p.append(Process(target=processing,args=(i,lock,dbi[i],query_lists[i])))
    for i in p:
        i.start()
    for i in p:
        i.join()
    '''
    pool=Pool(processes=args.processor)
    all_results=pool.map(querys,query_lists)
    print >>sys.stderr,"query list size()",len(query_lists)
    print >>sys.stderr,"Results",len(all_results)
    print >>sys.stderr,"DONE"
    output(all_results)
def init_dbi():
    '''
    init a dbi based on args for a process.
    '''
    init_dict={}
    if args.dbformat=="guess":
        if Tools.suffix(args.db)=="gz": 
            args.dbformat="tabix"
            args.tabix_format=Tools.guess_format(args.db)
        else:
            args.dbformat=Tools.guess_format(args.db)
    if args.query_method:
        dict["method"]=args.query_method
    if args.tabix_format:
        init_dict["tabix"]=args.tabix_format
    if args.tabix_header:
        init_dict["tabix"]="metabed"
        init_dict["header"]=args.tabix_header
    dbi=DBI.init(args.db,args.dbformat,**init_dict)
    return dbi
def querys(query_list):
    '''
    query a list 
    '''
    dbi=init_dbi()
    results=[]
    for i,x in enumerate(query_list):
        results.append(query(dbi,x))
    return results


    
def output(results):
    for i in iter(results):
        print >>out,i

def iter(results):
    index=-1
    for i in range(query_num):
        j=i%args.processor
        if j==0:
            index+=1
        #print >>sys.stderr,len(results[j])
        #print >>sys.stderr,len(results[j][index])
        
        yield results[j][index]


    




def query(db,x):
    global dict
    retv="QR\t"+str(x)+"\n"
    results=db.query(x,**dict)
    if isinstance(results,numpy.ndarray) or isinstance(results,list):
        retv+="HT\t\n"
        for value in results:
            retv+=str(value)+","
        retv+="\n"
    elif isinstance(results,str):
        retv+"HT\t",
        retv+=str(results)+"\n"
    else:
        for j in results:
            if isinstance(j,list):
                for y in j:
                    retv+="HT\t"+str(y)+"\n"
                retv+="\n"
            else:
                retv+="HT\t"+str(j)+"\n"
    if args.dbformat=="tabix":
        x.chr=x.chr.replace("chr","")
        for j in db.query(x,**dict):
            retv+="HT\t"+str(j)+"\n"
    return retv


if __name__=="__main__":
    Main()
