#!/usr/bin/env python
# Programmer : zhuxp
# Date: 
# Last-modified: 01-09-2014, 19:12:03 EST
VERSION="0.1"
import os,sys,argparse
from xplib.Annotation import Bed
from xplib import TableIO,Tools,DBI
from xplib.Tools import IO
import signal
signal.signal(signal.SIGPIPE,signal.SIG_DFL)
import gzip
import time
import multiprocessing as mp
import array,tempfile,heapq
assert array.array('i').itemsize==4
MAX_ARRAY_SIZE=5000000
def ParseArg():
    ''' This Function Parse the Argument '''
    p=argparse.ArgumentParser( description = 'Example: %(prog)s -h', epilog='Library dependency : xplib')
    p.add_argument('-v','--version',action='version',version='%(prog)s '+VERSION)
    p.add_argument('-i','--input',dest="input",default="stdin",type=str,help="input file DEFAULT: STDIN")
    p.add_argument('-o','--output',dest="output",type=str,default="stdout",help="output file DEFAULT: STDOUT")
    p.add_argument('-n','--num_cpus',dest="num_cpus",type=str,default=4,help="number of cpus DEFAULT: %(default)")
    if len(sys.argv)==1:
        print >>sys.stderr,p.print_help()
        exit(0)
    return p.parse_args()
def Main():
    '''
    IO TEMPLATE
    '''
    global args,out,dbi
    args=ParseArg()
    dbi=DBI.init(args.input,"bam")
    out=IO.fopen(args.output,"w")
    '''
    END OF IO TEMPLATE 
    '''
    print >>out,"# This data was generated by program ",sys.argv[0]," (version: %s)"%VERSION,
    print >>out,"in bam2x ( https://github.com/nimezhu/bam2x )"
    print >>out,"# Date: ",time.asctime()
    print >>out,"# The command line is :"
    print >>out,"#\t"," ".join(sys.argv)
    chrs=[]
    for i in dbi.query(method="references"):
        chrs.append(i)
    p=mp.Pool(processes=args.num_cpus)    
    results=p.map(process_chrom,chrs)
    output(results)
    #process_chrom("chr1")
def output(results):
    for i in results:
        print >>out,i
        print >>out,""

from xplib.Turing import TuringCode
from xplib.Turing import TuringCodeBook as cb


def process_chrom(chrom):
    retv=""
    a=[]
    data=[[]]
    k=0
    for i in dbi.query(chrom,method="fetch12"):
        heapq.heappush(data[0],TuringCode(i.start,cb.ON))
        heapq.heappush(data[0],TuringCode(i.stop,cb.OFF))
        k+=2
        for j in i.Exons():
            heapq.heappush(data[0],TuringCode(j.start,cb.BLOCKON))
            heapq.heappush(data[0],TuringCode(j.stop,cb.BLOCKOFF))
            k+=2
        if k>MAX_ARRAY_SIZE:
            data[0].sort()
            f=tempfile.TemporaryFile()
            data.append(codes_from_file_iterator(f))
            codes_write_to_file(data[0],f)
            f.seek(0)
            data[0]=[]
            k=0
    data[0].sort()
    #print "data length:",len(data)
    for i in codesToBedGraph(heapq.merge(*data)):
        retv+=chrom
        for j in i:
            retv+="\t"+str(j)
        retv+="\n"
    return retv
def codesToBedGraph(iter):
    a=iter.next()
    last_pos=a.pos
    counter=0
    for i in iter:
        if i.pos!=last_pos:
            yield (last_pos,i.pos,counter)
            last_pos=i.pos
        if i.code==cb.BLOCKON:
            counter+=1
        if i.code==cb.BLOCKOFF:
            counter-=1
    yield (last_pos,i.pos,counter)
    raise StopIteration



def codes_from_file_iterator(f):
    while True:
        a = array.array("i")
        a.fromstring(f.read(4000))
        if not a:
            break
        for i in range(0,len(a),2):
            yield TuringCode(a[i],a[i+1])
def codes_write_to_file(a,f):
    b=array.array("i")
    for i in a:
        b.append(i.pos)
        b.append(i.code)
    b.tofile(f)



    
if __name__=="__main__":
    Main()








