#!/usr/bin/env python
# Programmer : zhuxp
# Date: 
# Last-modified: 02-06-2013, 16:30:26 EST
VERSION="0.1"
'''
xQueryMT.py is a test muilt thread version of xQuery.py
xQuery.py is an example program for using xplib.DBI interface
it reports the overlap features or data from the query region.

the query file format can be:
bed,vcf,genebed etc.

the database or data file can be:
bam,tabix,vcf,bed,genebed etc.

for tabix ant other genome annotation file ,
    it yield the overlap annotations in this region
for bam file
    it yield the Nucleotides Distribution in each site of this region.
Example:
    xQueryMT.py -i file.bed -a file.bam
'''
import os,sys,argparse
from xplib.Annotation import Bed
from xplib import TableIO
import pysam
from xplib import DBI
import signal
signal.signal(signal.SIGPIPE,signal.SIG_DFL)
import time
import thread
def ParseArg():
    ''' This Function Parse the Argument '''
    p=argparse.ArgumentParser( description = 'Example: %(prog)s -i file.snp -a file.vcf.gz -A tabix -o output.file', epilog='Library dependency : pysam xplib')
    p.add_argument('-v','--version',action='version',version='%(prog)s '+VERSION)
    p.add_argument('-i','--input',dest="input",type=str,default="stdin",help="input file")
    p.add_argument('-I','--format',dest="input_format",type=str,help="input file format",default="bed")
    p.add_argument('-A','--dbformat',dest="dbformat",type=str,help="input file database format. {bed|genebed|tabix|bam}",default="bed")
    p.add_argument('-o','--output',dest="output",type=str,default="stdout",help="output file")
    p.add_argument('-a','--annotations',dest="db",type=str,default="",required=True,help="query annotation files")
    p.add_argument('-t','--thread',dest="thread",type=int,default=4,help="query threadsi default %(default)i")
    if len(sys.argv)==1:
        print >>sys.stderr,p.print_help()
        exit(0)
    return p.parse_args()

def fquery(querys,dbi,i):
    print "Thread:(%d)\n"%i
    print "query length in thread:",len(querys)
    for q in querys:
        print "Thread %d"%i,q
    thread.exit_thread()


def Main():
    global args,out
    args=ParseArg()
    if args.output=="stdout":
        out=sys.stdout
    else:
        try:
            out=open(args.output,"w")
        except IOError:
            print >>sys.stderr,"can't open file ",args.output,"to write. Using stdout instead"
            out=sys.stdout
    argv=sys.argv
    argv[0]=argv[0].split("/")[-1]
    print >>out,"# This data was generated by program ",argv[0],"(version %s)"%VERSION,
    print >>out,"in bam2x ( https://github.com/nimezhu/bam2x )"
    print >>out,"# Date: ",time.asctime()
    print >>out,"# The command line is :\n#\t"," ".join(argv)
   
    dbi=DBI.init(args.db,args.dbformat)
    hits=0
    query=0
    if args.input=="stdin":
        input=sys.stdin
    else:
        input=args.input

    query_length=0
    hits_number=0
    query_sets=[]
    for x in TableIO.parse(input,args.input_format):
        query_sets.append(x)
    length=len(query_sets)
    
    size=length/args.thread
    #results=[[] for i in range(args.thread)]
    for i in range(args.thread):
        end= (i+1)*size if (i+1)*size < length else length
        end= end if (i+1)!=args.thread else length
        querys=query_sets[i*size:end]
     #   print i*size,end
     #   for j in querys: print j
        thread.start_new_thread(fquery,(querys,dbi,i))
       

    #for sets in results:
     #   for entry in sets:
     #       print entry

    

    
if __name__=="__main__":
    Main()




